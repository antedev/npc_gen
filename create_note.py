import sys
import argparse
import json
import re
import configparser
from pathlib import Path

from modules.config_manager import load_config
from modules.gemini_client import configure_gemini, generate_content_with_gemini
from modules.obsidian_utils import create_obsidian_note

TEMPLATE_PATH = Path(__file__).parent / 'TEMPLATE.md'

def create_npc_note(config: configparser.ConfigParser, name: str, description: str):
    """
    Generates a new NPC note by filling a template with AI-generated details.
    """
    # 1. Read template and find placeholders like {{placeholder}}
    if not TEMPLATE_PATH.is_file():
        print(f"Error: Template file not found at {TEMPLATE_PATH}")
        return

    template_content = TEMPLATE_PATH.read_text(encoding='utf-8')
    placeholders = re.findall(r"\{\{(.*?)\}\}", template_content)

    # We'll have Gemini fill all placeholders except the name, which we provide.
    if 'npc_name' in placeholders:
        placeholders.remove('npc_name')

    # 2. Build a detailed, structured prompt for Gemini
    prompt = f"""
You are a creative assistant for a fantasy world-building project.
Your task is to flesh out a Non-Player Character (NPC) based on a concept and a list of required fields.
Please provide the output in a valid JSON format, with keys matching the requested field names.

**NPC Concept:** {name}, {description}

**JSON fields to generate:**
{', '.join(placeholders)}

Respond ONLY with the JSON object. Do not include any explanatory text or markdown formatting like ```json.
"""

    # 3. Generate content as JSON
    print(f"Fleshing out details for '{name}'...")
    json_string = generate_content_with_gemini(config, prompt, json_mode=True)

    if not json_string:
        print("Failed to generate NPC details.")
        return

    # 4. Parse JSON and fill the template
    try:
        npc_details = json.loads(json_string)
    except json.JSONDecodeError:
        print("Error: Failed to decode JSON from Gemini response.")
        print(f"Received: {json_string}")
        return

    final_content = template_content
    # Replace the name first, as it's a special case
    final_content = final_content.replace('{{npc_name}}', name)

    # Replace the rest of the details generated by the AI
    for key, value in npc_details.items():
        # Basic handling for newlines in markdown values
        processed_value = str(value).replace('\n', '<br>')
        final_content = final_content.replace(f'{{{{{key}}}}}', processed_value)

    # 5. Create the Obsidian note
    note_tags = ["npc", "fantasy", "gemini-generated"]
    create_obsidian_note(config, name, final_content, note_tags)

def main():
    """Main execution function."""
    parser = argparse.ArgumentParser(description="Generate an NPC note for Obsidian using Gemini.")
    parser.add_argument("name", type=str, help="The name of the NPC (e.g., 'Elara the Tavern Keeper').")
    parser.add_argument("description", type=str, help="A brief description of the NPC (e.g., 'A retired adventurer who now runs a quiet inn.').")
    args = parser.parse_args()

    # 1. Load and validate configuration
    config = load_config()
    if not config:
        sys.exit(1)

    # 2. Configure the Gemini client
    if not configure_gemini(config):
        sys.exit(1)

    # 3. Generate the NPC note based on command-line arguments
    create_npc_note(config, args.name, args.description)


if __name__ == '__main__':
    main()